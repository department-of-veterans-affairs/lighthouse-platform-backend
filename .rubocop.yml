# in rakelib/lint.rake we require rubocop-thread_safety for the CI env only,
# because codeclimate does not support rubocop-thread_safety
require:
  - rubocop-rails
  - rubocop-rspec
  - rubocop-thread_safety

AllCops:
  TargetRailsVersion: 6.0
  Include:
    - '**/Dangerfile'
    - '**/Gemfile'
    - '**/config.ru'
    - '**/Rakefile'
    - '**/*.rake'
    - '**/*.rb'
  Exclude:
    - 'bin/*'
    - db/schema.rb
    - db/seeds.rb
    - db/migrate/*.rb
    - 'script/**/*'
    - 'vendor/**/*'
    - modules/**/db/migrate/*.rb
  NewCops: enable

# This allows you to use have writers like self.method_name(name) vs self.method_name=(name)
Style/TrivialAccessors:
  AllowDSLWriters: true

# This is the rubocop default but putting it here explicitly
# strong benefit for code readability and speed in reviewing PRs for code review
# only use double quote when doing interpolation or complex escape sequences
Style/StringLiterals:
  EnforcedStyle: single_quotes

Style/Documentation:
  Enabled: false

Rails/I18nLocaleTexts:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

# This cop forces you to put a return at the beginning of a block of code rather than having an if statement
# whose body carries to the end of the function. For example:
#
# def foo
#   ...
#   if test
#     ...
#   end
# end
#
# would be considered bad, and the cop would force you to put a `return if !test` before that block and
# then remove the if. The problem is that this hides intent, since the if test does have a purpose in
# readability, and it could also be easier for future changes to miss the return statement and add code
# after it expecting it to be executed.
Style/GuardClause:
  Enabled: false

# This is pretty much the same thing as the one above. Inside a loop, it forces you to use next to skip
# iteration rather than using an if block that runs to the end of the loop, and it suffers from the same
# problems as above.
Style/Next:
  Enabled: false

Naming/VariableNumber:
  Enabled: false

# This forces you to replace things like: `[1, 2, 3].length == 0` with `[1,2,3].empty?`. The problem is that
# not all things that implement length also implement empty? so you will get errors that cannot be resolved,
# and the cop will encourage you to do things that are incorrect.
Style/ZeroLengthPredicate:
  Enabled: false

Layout/LineLength:
  Max: 120
  Exclude:
    - 'Gemfile'
    - 'config/initializers/devise.rb'
    - 'config/initializers/simple_form.rb'
    - 'app/services/slack/report_service.rb'
    - 'lib/tasks/data_migrations.rake'
Metrics/MethodLength:
  Exclude:
    - 'rakelib/support/shell_command.rb'
    - 'app/controllers/admin/api/v0/apis_controller.rb'
    - 'spec/services/consumer_import_service_spec.rb'
    - 'app/models/api.rb'
  IgnoredMethods:
    - 'user_params'
    - 'signup_params'
    - 'bulk_upload'
    - 'construct_import'
    - 'fetch_dynamo_db'
    - 'update_kong_consumers'
    - 'build_user_from_dynamo'
    - 'apply'
    - 'consumer_signup'
    - 'build_new_acg_application_payload'
    - 'build_new_ccg_application_payload'
    - 'build_message'
    - 'add_api_to_consumer'
    - 'weekly_report_message'
    - 'dynamo_mock_response'
    - 'auth_refs'
Metrics/CyclomaticComplexity:
  IgnoredMethods:
    - 'consumer_signup'
    - 'validate_param!'
    - 'construct_import'
    - 'auth_refs'
Metrics/PerceivedComplexity:
  IgnoredMethods:
    - 'consumer_signup'
    - 'construct_import'
    - 'auth_refs'
Rails:
  Enabled: true

Rails/Output:
  Exclude:
    - 'lib/tasks/**/*'

Rails/SkipsModelValidations:
  Exclude:
    - 'app/services/dynamo_import_service.rb'

Metrics/ClassLength:
  Max: 400

Metrics/AbcSize:
  Max: 40
  IgnoredMethods:
    - 'consumer_signup'
    - 'construct_import'

# removing rule because get_session implies HTTP GET, and informs method
Naming/AccessorMethodName:
  Enabled: false

Rails/LexicallyScopedActionFilter:
  Exclude:
    - "app/controllers/concerns/filterable.rb"

# Blocks are limited to 25 lines or less
# removing block length rule for rspec DSL
Metrics/BlockLength:
  Exclude:
    - 'spec/**/*.rb'
    - 'rakelib/**/*.rake'
    - 'lib/tasks/**/*.rake'
    - 'config/**/*.rb'
    - 'app/api/v0/*'
    - 'app/api/utilities.rb'
  IgnoredMethods:
    - 'helpers'

# Don't worry about ambiguous blocks in RSpec
# Official recommendation from rubocop team is to disable this rule for specs.
# See: https://github.com/rubocop-hq/rubocop/issues/4222
Lint/AmbiguousBlockAssociation:
  Exclude:
    - "spec/**/*"


# Don't enforce super for service objects
# because it breaks when using the `self.call(*args, &block)` pattern
Lint/MissingSuper:
  Exclude:
    - "app/services/**/*"

# This file does not need to be snake case
Naming/FileName:
  Exclude:
    - "Guardfile"

# TODO: REVIEW THESE AND MAKE CHANGES

# We should try to use StandardError, but some errors like timeout inherit from Exception (beware)
Style/RescueStandardError:
  EnforcedStyle: implicit

# The suggestions here don't seem to make sense in most cases. Skip for now.
Naming/MemoizedInstanceVariableName:
  Enabled: false

# It was determined these suggestions had the potential to change behavior.
Rails/ActiveRecordAliases:
  Enabled: false

# The use of variables such as n to represent number, x and y for x-axis and y-axis, el for element,
# v for value, i for index, and e for error are all standard abbreviations and should be excluded.
Naming/MethodParameterName:
  Enabled: false

# Was determined that using described_class makes the code less readable.
RSpec/DescribedClass:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/AnyInstance:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/BeforeAfterAll:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/ContextWording:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/ExampleLength:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/ExpectInHook:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/InstanceVariable:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/LeakyConstantDeclaration:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/MessageSpies:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/NamedSubject:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/VerifiedDoubles:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/MultipleExpectations:
  Enabled: false

# Determined to be too benign and/or numerous to justify changing
RSpec/NestedGroups:
  Enabled: false

# This seems to generate a lot of false positives
RSpec/EmptyExampleGroup:
  Enabled: false

# This seems to generate a lot of false positives
RSpec/LetSetup:
  Enabled: false

# the default style recently changed, but it's not worth changing
Rails/FilePath:
  EnforcedStyle: arguments

# Added in v0.81
Lint/RaiseException:
  Enabled: true

Lint/StructNewOverride:
  Enabled: true

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

# Added in v0.82
Layout/SpaceAroundMethodCallOperator:
  Enabled: true

Style/ExponentialNotation:
  Enabled: true

# Added in v0.83
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

Style/SlicingWithRange:
  Enabled: true

# Added in v0.84
Lint/DeprecatedOpenSSLConstant:
  Enabled: true
Gemspec/DateAssignment: # (new in 1.10)
  Enabled: true
Layout/SpaceBeforeBrackets: # (new in 1.7)
  Enabled: true
Lint/AmbiguousAssignment: # (new in 1.7)
  Enabled: true
Lint/DeprecatedConstants: # (new in 1.8)
  Enabled: true
Lint/DuplicateBranch: # (new in 1.3)
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement: # (new in 1.1)
  Enabled: true
Lint/EmptyBlock: # (new in 1.1)
  Enabled: true
Lint/EmptyClass: # (new in 1.3)
  Enabled: true
Lint/EmptyInPattern: # (new in 1.16)
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # (new in 1.8)
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # (new in 1.2)
  Enabled: true
Lint/NumberedParameterAssignment: # (new in 1.9)
  Enabled: true
Lint/OrAssignmentToConstant: # (new in 1.9)
  Enabled: true
Lint/RedundantDirGlobSort: # (new in 1.8)
  Enabled: true
Lint/SymbolConversion: # (new in 1.9)
  Enabled: true
Lint/ToEnumArguments: # (new in 1.1)
  Enabled: true
Lint/TripleQuotes: # (new in 1.9)
  Enabled: true
Lint/UnexpectedBlockArity: # (new in 1.5)
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # (new in 1.1)
  Enabled: true
Style/ArgumentsForwarding: # (new in 1.1)
  Enabled: true
Style/CollectionCompact: # (new in 1.2)
  Enabled: true
Style/DocumentDynamicEvalDefinition: # (new in 1.1)
  Enabled: true
Style/EndlessMethod: # (new in 1.8)
  Enabled: true
Style/HashConversion: # (new in 1.10)
  Enabled: true
Style/HashExcept: # (new in 1.7)
  Enabled: true
Style/IfWithBooleanLiteralBranches: # (new in 1.9)
  Enabled: true
Style/InPatternThen: # (new in 1.16)
  Enabled: true
Style/MultilineInPatternThen: # (new in 1.16)
  Enabled: true
Style/NegatedIfElseCondition: # (new in 1.2)
  Enabled: true
Style/NilLambda: # (new in 1.3)
  Enabled: true
Style/QuotedSymbols: # (new in 1.16)
  Enabled: true
Style/RedundantArgument: # (new in 1.4)
  Enabled: true
Style/StringChars: # (new in 1.12)
  Enabled: true
Style/SwapValues: # (new in 1.1)
  Enabled: true
Rails/ActiveRecordCallbacksOrder: # (new in 2.7)
  Enabled: true
Rails/AddColumnIndex: # (new in 2.11)
  Enabled: true
Rails/AfterCommitOverride: # (new in 2.8)
  Enabled: true
Rails/AttributeDefaultBlockValue: # (new in 2.9)
  Enabled: true
Rails/EagerEvaluationLogMessage: # (new in 2.11)
  Enabled: true
Rails/ExpandedDateRange: # (new in 2.11)
  Enabled: true
Rails/FindById: # (new in 2.7)
  Enabled: true
Rails/I18nLocaleAssignment: # (new in 2.11)
  Enabled: true
Rails/Inquiry: # (new in 2.7)
  Enabled: true
Rails/MailerName: # (new in 2.7)
  Enabled: true
Rails/MatchRoute: # (new in 2.7)
  Enabled: true
Rails/NegateInclude: # (new in 2.7)
  Enabled: true
Rails/Pluck: # (new in 2.7)
  Enabled: true
Rails/PluckInWhere: # (new in 2.7)
  Enabled: true
Rails/RenderInline: # (new in 2.7)
  Enabled: true
Rails/RenderPlainText: # (new in 2.7)
  Enabled: true
Rails/ShortI18n: # (new in 2.7)
  Enabled: true
Rails/SquishedSQLHeredocs: # (new in 2.8)
  Enabled: true
Rails/TimeZoneAssignment: # (new in 2.10)
  Enabled: true
Rails/UnusedIgnoredColumns: # (new in 2.11)
  Enabled: true
Rails/WhereEquals: # (new in 2.9)
  Enabled: true
Rails/WhereExists: # (new in 2.7)
  Enabled: true
Rails/WhereNot: # (new in 2.8)
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # (new in 1.18)
  Enabled: true
Naming/InclusiveLanguage: # (new in 1.18)
  Enabled: true
RSpec/FilePath:
  Enabled: false
RSpec/MultipleMemoizedHelpers:
  Enabled: false

