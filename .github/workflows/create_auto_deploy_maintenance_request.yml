name: Create Auto Deploy Maintenance Request

on:
  push:

env:
  commit_message: ${{ github.event.head_commit.message }}
  snapshot_commit: 'Test Snapshot'

jobs:
  verify-version-update:
    name: Confirm Snapshot
    runs-on: ubuntu-latest
    steps:
      - name: MR Deployment Initialized
        if: ${{ startsWith(env.commit_message, env.snapshot_commit) }}
        run: echo  Detected ${{ env.snapshot_commit }} - beginning MR creation
      - name: MR Deployment Abandoned
        if: ${{ !startsWith(env.commit_message, env.snapshot_commit) }}
        run: |
          echo  Failed to locate MR initializer. Exiting...
          exit 1;

  pre_mr_checks_and_create:
    needs: verify-version-update
    runs-on: ubuntu-latest
    outputs:
      mr_number: ${{ steps.get_mr_number.outputs.mr_number }}
      time_string: ${{ steps.get_time_string.outputs.time_string }}
    steps:
      - name: Set timezone to Eastern
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'America/New_York'
      - id: check_for_existing_mr
        name: Check for existing MRs
        continue-on-error: true
        run: |
          echo ${{secrets.GITHUB_TOKEN}} | gh auth login --with-token
          gh issue list \
            -R 'department-of-veterans-affairs/lighthouse-platform-backend' \
            -l 'repo: lighthouse-platform-backend' \
            --limit 1 \
            --json id,number,state,labels,title \
            > issue.json
          cat issue.json
          if [ "[]" == "$(cat issue.json)" ]; then
            :
          else
            # issue.json isn't an empty json array and there is currently an open MR tagged "repo: lighthouse-platform-backend"
            # Any open MR should cancel the creation of a new MR
            echo 'An MR is currently open so no new MR can be created'
            exit 1;
          fi

  create_mr:
    runs-on: ubuntu-latest
    needs: pre_mr_checks_and_create
    steps:
      - id: get_proposed_release_tag
        name: Get the tag name of the latest release
        run: |
          PROPOSED_RELEASE_TAG=`gh api /repos/department-of-veterans-affairs/lighthouse-platform-backend/releases/latest | jq -r ".tag_name"`
          echo $PROPOSED_RELEASE_TAG
          echo "::set-output name=proposed_release_tag::$PROPOSED_RELEASE_TAG"
      - id: create_mr
        name: Generate the MR body text and create MR
        env:
          proposed-release-tag: ${{ steps.get_proposed_release_tag.outputs.proposed_release_tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wget https://raw.githubusercontent.com/department-of-veterans-affairs/lighthouse-platform-backend/API-14772_auto_deploy/.github/workflows/assets/maintenance-request.md
          TEMPLATE_ISSUE_LABEL=`grep labels maintenance-request.md | cut -f2 -d " "`
          TEMPLATE_ASSIGNEE=`grep assignees maintenance-request.md | cut -f2 -d " "`
          sed -i -e '1,8d' maintenance-request.md
          # Set MR template variables
          DAY_OF_THE_WEEK=`date +%A`
          if [ "Friday" == "$DAY_OF_THE_WEEK" ]; then
            PROPOSED_WINDOW_OPENING=`date --date="10:00 next Monday" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 next Monday" +"%Y/%m/%d %H:%M %Z"`
          else
            PROPOSED_WINDOW_OPENING=`date --date="10:00 tomorrow" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 tomorrow" +"%Y/%m/%d %H:%M %Z"`
          fi

          # Get the releases
          echo "Get the releases"
          gh api /repos/department-of-veterans-affairs/lighthouse-platform-backend/releases > releases.json
          CURRENT_RELEASE_ID=`jq -r '.[0].tag_name' releases.json`
          echo $CURRENT_RELEASE_ID
          PROPOSED_RELEASE_PRS=`jq -r ".[] | select(.id > $CURRENT_RELEASE_ID ) | \"- \" + .name + \"\"" releases.json | sed -E 's/(.*)\#([0-9]{1,})\)/\2/'`
          echo '```' > maintainer-notes.txt
          echo "Release tag: ${{ env.proposed-release-tag }}" >> maintainer-notes.txt
          echo '```' > maintainer-notes.txt
          touch user-notes.txt
          for pr in `echo $PROPOSED_RELEASE_PRS`; do
            echo "Get individual PR info"
            echo $pr
            gh api /repos/department-of-veterans-affairs/lighthouse-platform-backend/pulls/$pr > pr-$pr.json
            if [ "impact: maintainers" == "`jq -r '.labels[] | select(.name == \"impact: maintainers\") .name' pr-$pr.json`" ]; then
              echo "- " `jq -r '.title' pr-$pr.json` "[#$pr](https://github.com/department-of-veterans-affairs/lighthouse-platform-backend/pull/$pr)" >> maintainer-notes.txt
            fi
            if [ "impact: users" == "`jq -r '.labels[] | select(.name == \"impact: users\") .name' pr-$pr.json`" ]; then
              echo "- " `jq -r '.title' pr-$pr.json` "[#$pr](https://github.com/department-of-veterans-affairs/lighthouse-platform-backend/pull/$pr)" >> user-notes.txt
            fi
          done
          ISSUE_TITLE="Deploy lighthouse-platform-backend to production ($PROPOSED_WINDOW_OPENING)"

          # Replace values in issue template
          echo $PROPOSED_WINDOW_OPENING
          sed -i "s|__proposed_start_date_time__|$PROPOSED_WINDOW_OPENING|g" maintenance-request.md
          echo $PROPOSED_WINDOW_CLOSING
          sed -i "s|__proposed_end_date_time__|$PROPOSED_WINDOW_CLOSING|g" maintenance-request.md
          # File splicing for maintainer notes
          cat maintainer-notes.txt
          sed -n '1,/^MAINTAINER_NOTES$/p' maintenance-request.md | sed \$d > temp-notes.md
          cat maintainer-notes.txt >> temp-notes.md
          sed '1,/^MAINTAINER_NOTES$/d' maintenance-request.md >> temp-notes.md
          mv temp-notes.md maintenance-request.md
          # File splicing for user notes
          cat user-notes.txt
          sed -n '1,/^USER_NOTES$/p' maintenance-request.md | sed \$d > temp-notes.md
          cat user-notes.txt >> temp-notes.md
          sed '1,/^USER_NOTES$/d' maintenance-request.md >> temp-notes.md
          mv temp-notes.md maintenance-request.md

          cat maintenance-request.md

          echo "Create issue"
          gh issue create \
            -R 'department-of-veterans-affairs/lighthouse-platform-backend' \
            --title "$ISSUE_TITLE" \
            --assignee "$TEMPLATE_ASSIGNEE" \
            --label "$TEMPLATE_ISSUE_LABEL" \
            --label "repo: lighthouse-platform-backend" \
            --body-file maintenance-request.md