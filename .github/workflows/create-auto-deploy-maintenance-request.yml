name: Create Auto Deploy Maintenance Request

on:
  release:
    types: [published]

jobs:
  create_mr:
    runs-on: ubuntu-latest
    steps:
      - id: check_for_existing_mr
        name: Check for existing MRs
        continue-on-error: true
        run: |
          echo ${{ secrets.GIT_AUTO_DEPLOY_TOKEN }} | gh auth login --with-token
          gh issue list \
            -R 'department-of-veterans-affairs/lighthouse-devops-support' \
            -l 'repo: lighthouse-platform-backend' \
            --limit 1 \
            --json id,number,state,labels,title \
            > issue.json
          cat issue.json
          if [ "[]" == "$(cat issue.json)" ]; then
            :
          else
            # issue.json isn't an empty json array and there is currently an open MR tagged "repo: lighthouse-platform-backend"
            # Any open MR should cancel the creation of a new MR
            echo 'An MR is currently open so no new MR can be created'
            exit 1;
          fi
      - name: Set timezone to Eastern
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'America/New_York'
      - name: Checkout
        uses: actions/checkout@v3
        if: steps.check_for_existing_mr.outcome == 'success'
      - id: create_mr
        name: Generate the MR body text and create MR
        if: steps.check_for_existing_mr.outcome == 'success'
        run: |
          mv ./.github/workflows/assets/maintenance-request.md ./
          TEMPLATE_ISSUE_LABEL=`grep labels maintenance-request.md | cut -f2 -d " "`
          TEMPLATE_ASSIGNEE=`grep assignees maintenance-request.md | cut -f2 -d " "`
          sed -i -e '1,8d' maintenance-request.md
          # Set MR template variables
          DAY_OF_THE_WEEK=`date +%A`
          if [ "Friday" == "$DAY_OF_THE_WEEK" ]; then
            PROPOSED_WINDOW_OPENING=`date --date="10:00 next Monday" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 next Monday" +"%Y/%m/%d %H:%M %Z"`
          else
            PROPOSED_WINDOW_OPENING=`date --date="10:00 tomorrow" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 tomorrow" +"%Y/%m/%d %H:%M %Z"`
          fi

          # Get the releases
          echo "Get the releases"
          gh api /repos/department-of-veterans-affairs/lighthouse-platform-backend/releases > releases.json
          PROPOSED_RELEASE_TAG=`jq -r '.[0].tag_name' releases.json`
          MERGE_NOTE=`jq -r '.[0].body' releases.json`
          echo '```' > maintainer-notes.txt
          echo "Release tag: $PROPOSED_RELEASE_TAG" >> maintainer-notes.txt
          echo ${MERGE_NOTE##*-} >> maintainer-notes.txt
          echo '```' >> maintainer-notes.txt

          ISSUE_TITLE="Deploy lighthouse-platform-backend to production ($PROPOSED_WINDOW_OPENING)"

          # Replace values in issue template
          echo $PROPOSED_WINDOW_OPENING
          sed -i "s|__proposed_start_date_time__|$PROPOSED_WINDOW_OPENING|g" maintenance-request.md
          echo $PROPOSED_WINDOW_CLOSING
          sed -i "s|__proposed_end_date_time__|$PROPOSED_WINDOW_CLOSING|g" maintenance-request.md
          # File splicing for maintainer notes
          cat maintainer-notes.txt
          sed -n '1,/^MAINTAINER_NOTES$/p' maintenance-request.md | sed \$d > temp-notes.md
          cat maintainer-notes.txt >> temp-notes.md
          sed '1,/^MAINTAINER_NOTES$/d' maintenance-request.md >> temp-notes.md
          mv temp-notes.md maintenance-request.md

          cat maintenance-request.md

          echo "Create issue"
          echo ${{ secrets.GIT_AUTO_DEPLOY_TOKEN }} | gh auth login --with-token
          gh issue create \
            -R 'department-of-veterans-affairs/lighthouse-devops-support' \
            --title "$ISSUE_TITLE" \
            --assignee "$TEMPLATE_ASSIGNEE" \
            --label "$TEMPLATE_ISSUE_LABEL" \
            --label "repo: lighthouse-platform-backend" \
            --body-file maintenance-request.md
      - id: add_mr_in_progress_label_to_existing_prs
        name: Add MR in progress label to existing PRs
        if: steps.create_mr.outcome == 'success'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          prNums=$(gh pr list -R 'department-of-veterans-affairs/lighthouse-platform-backend' --json number --jq '.[] | .number')
          for num in ${prNums[@]}; do
            gh pr edit $num -R 'department-of-veterans-affairs/lighthouse-platform-backend' --add-label "MR in progress"
          done
      - name: Enable Auto Deploy Workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.create_mr.outcome == 'success'
        continue-on-error: true
        run: gh workflow enable 'Auto Deploy master to Production'
