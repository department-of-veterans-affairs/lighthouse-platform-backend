name: Auto Deploy master to Production

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 13,14,15,16,17,18,19,20,21,22,23 * * 1,2,3,4,5'

env:
  environment: 'QA'

jobs:
  run_checks_and_deploy:
    runs-on: ubuntu-latest
    outputs:
      mr_number: ${{ steps.get_mr_number.outputs.mr_number }}
      build_number: ${{ steps.deploy_to_production.outputs.build_number }}
      start_time: ${{ steps.check_build_status.outputs.start_time }}
      end_time: ${{ steps.check_build_status.outputs.end_time }}
      execution: ${{ steps.check_build_status.outputs.execution }}
    steps:
      - name: Set timezone to Eastern
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'America/New_York'
      - id: get_time_string
        name: Get time string for MR search
        run: |
          TIME_STRING=`date +"%Y/%m/%d %H:%M %Z" | sed -E 's/\:([03]{1}|[14]{1})[0-9]{1}/:\10/g' | sed 's/\:1/:0/' | sed 's/\:4/:3/'`
          echo $TIME_STRING
          echo "::set-output name=time_string::$TIME_STRING"
          # testing if curl is available.
          echo `curl --help`
      - id: get_mr_number
        name: Grab matching deploy MR
        continue-on-error: true
        run: |
          TIME_STRING=`echo ${{steps.get_time_string.outputs.time_string}}`
          echo $TIME_STRING
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh issue list \
            -R 'department-of-veterans-affairs/lighthouse-platform-backend' \
            -l 'repo: lighthouse-platform-backend' \
            --limit 1 \
            --json id,number,state,labels,title,body \
            --jq "[.[]|select(.title==\"Deploy lighthouse-platform-backend to production ($TIME_STRING)\")][0]" \
            > issue.json
          cat issue.json
          MR_NUMBER=`jq -e ".number" issue.json`
          echo $MR_NUMBER
          if [ -z "$MR_NUMBER" ]; then
            # If there's no MR_NUMBER then exit because there's no open MR to deploy
            echo "No MR Found. Exiting..."
            exit 1;
          fi
          APPROVED=`jq ".labels" issue.json | jq -e ".[] | select(.name==\"status: approved\")"`
          echo $APPROVED
          if [ -z "$APPROVED" ]; then
            echo "MR has not been approved. Exiting..."
            exit 1;
          fi

          echo "::set-output name=mr_number::$MR_NUMBER"
      - id: deploy_to_production
        name: Deploy to production
        if: steps.get_mr_number.outcome == 'success'
        continue-on-error: true
        run: |
          echo "pre-fetching next build number..."
          NEXT_BUILD=`curl -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/api/json | jq '.nextBuildNumber'
          echo "Next Build: $NEXT_BUILD"
          echo "Enqueueing ${{ env.environment }} release"
          IS_SUCCESSFUL=`curl -Lsw '%{http_code}' -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} -X POST https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/build \
            --data-urlencode json='{"parameter": [{"name": "PRODUCT", "value": "platform-backend"}, {"name": "VPC", "value": ${{ env.environment }} }]}'`
          if [ $IS_SUCCESSFUL -ne 201 ]; then
            echo 'Build failed to queue...'
            exit 1;
          fi

          echo 'Successfully queued for build...'
          echo "::set-output name=build_number::$NEXT_BUILD"
      - id: check_build_status
        name: Check Build Status
        if: steps.deploy_to_production.outcome == 'success'
        run: |
          echo "Allowing queued jobs to be picked up... temporarily sleeping..."
          sleep 60
          BUILD_FOUND="false"
          while [ "$BUILD_FOUND" == "false" ]; do
            STATUS=`curl  -w "%{http_code}" -o build.json -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/${{ build_number }}/api/json`
            if [ $STATUS -ne 200 ]; then
              echo 'Failed to locate build...'
              echo 'exiting...'
              exit 1;
            fi
            USER_ID=`jq '.actions[] | select(._class == "hudson.model.CauseAction") | .causes[0].userId' build.json`
            if [ "$USER_ID" == "okapibot" ]; then
              BUILD_FOUND="true"
            else
              ((build_number++))
            fi
          done

          RUNNING="true"
          while [ $RUNNING == "true" ]; do
            STATUS=`jq '.result' build.json`
            if [ "$STATUS" == "FAILURE" ]
              echo 'Oh noes, something borked...'
              echo "https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/$build_number"
              exit 1;
            fi
            if [ "$STATUS" == "SUCCESS" ]
              RUNNING="false"
            else
              sleep 60
              curl -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/${{ build_number }}/api/json > build.json
            fi
          done

          TIMESTAMP=`jq '.timestamp' build.json`
          DURATION=`jq '.duration' build.json`
          END_TIME=$((TIMESTAMP + DURATION))
          START_TIME=`date --date="$TIMESTAMP" +"%Y/%m/%d %H:%M %Z"`
          END_TIME=`date --date="$END_TIME" +"%Y/%m/%d %H:%M %Z"`
          EXECUTION="https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/$build_number/console"

          echo "::set-output name=start_time::$START_TIME"
          echo "::set-output name=end_time::$END_TIME"
          echo "::set-output name=execution::$EXECUTION"
      - id: update_mr
        name: Update MR with build information
        if: steps.check_build_status.outcome == 'success'
        run: |
          START_TIME=`echo ${{ steps.check_build_status.outputs.start_time }}`
          END_TIME=`echo ${{ steps.check_build_status.outputs.end_time }}`
          EXECUTION=`echo ${{ steps.check_build_status.outputs.execution }}`
          MR_NUMBER=`echo ${{ steps.get_mr_number.outputs.mr_number }}`

          echo '```' > build-comment.md
          echo "Start: $START_TIME" >> build-comment.md
          echo "End: $END_TIME" >> build-comment.md
          echo "Execution: $EXECUTION" >> build-comment.md
          echo '```' >> build-comment.md

          gh issue comment $MR_NUMBER -R 'department-of-veterans-affairs/lighthouse-platform-backend' --body-file build-comment.md
      - uses: actions/checkout@v2
        if: |
          steps.deploy_to_production.outcome == 'success'
          && steps.check_build_status.outcome == 'success'
      - name: Disable Workflow till next MR is created
        if: |
          steps.deploy_to_production.outcome == 'success'
          && steps.check_build_status.outcome == 'success'
        run: |
          gh workflow disable 'Auto Deploy master to Production'
          exit 1;
