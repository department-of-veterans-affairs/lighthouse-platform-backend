name: Auto Deploy master to Production

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 13,14,15,16,17,18,19,20,21,22,23 * * 1,2,3,4,5'

env:
  environment: 'QA'

jobs:
  run_checks_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set timezone to Eastern
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'America/New_York'
      - id: get_time_string
        name: Get time string for MR search
        run: |
          TIME_STRING=`date +"%Y/%m/%d %H:%M %Z" | sed -E 's/\:([03]{1}|[14]{1})[0-9]{1}/:\10/g' | sed 's/\:1/:0/' | sed 's/\:4/:3/'`
          echo "time_string=$TIME_STRING" >> $GITHUB_OUTPUT
      - id: get_mr_number
        name: Grab matching deploy MR
        continue-on-error: true
        run: |
          TIME_STRING=`echo ${{steps.get_time_string.outputs.time_string}}`
          echo "The time is: $TIME_STRING"
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh issue list \
            -R 'department-of-veterans-affairs/lighthouse-platform-backend' \
            -l 'repo: lighthouse-platform-backend' \
            --limit 1 \
            --json id,number,state,labels,title,body \
            --jq "[.[]|select(.title==\"Deploy lighthouse-platform-backend to production ($TIME_STRING)\")][0]" \
            > issue.json
          cat issue.json
          MR_NUMBER=`jq ".number" issue.json`
          if [ -z "$MR_NUMBER" ]; then
            # If there's no MR_NUMBER then exit because there's no open MR to deploy
            echo "No MR Found. Exiting..."
            exit 1;
          fi
          echo "Found MR# $MR_NUMBER"
          APPROVED=`jq ".labels" issue.json | jq ".[] | select(.name==\"status: approved\")"`
          if [ -z "$APPROVED" ]; then
            echo "MR has not been approved. Exiting..."
            exit 1;
          fi
          echo "mr_number=$MR_NUMBER" >> $GITHUB_OUTPUT
      - id: deploy_to_production
        name: Deploy to production
        if: steps.get_mr_number.outcome == 'success'
        continue-on-error: true
        run: |
          echo "pre-fetching next build number..."
          NEXT_BUILD=`curl -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/api/json | jq '.nextBuildNumber'`
          echo "Next Build: $NEXT_BUILD"
          echo "Enqueueing ${{ env.environment }} release"
          IS_SUCCESSFUL=`curl -Lsw '%{http_code}' -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} -X POST https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/build \
            --data-urlencode json='{"parameter": [{"name": "PRODUCT", "value": "platform-backend"}, {"name": "VPC", "value": "${{ env.environment }}"}]}'`
          if [ $IS_SUCCESSFUL -ne 201 ]; then
            echo 'Build failed to queue...'
            exit 1;
          fi

          echo 'Successfully queued for build...'
          BUILD_QUEUE_TIME=`date +"%Y/%m/%d %H:%M %Z"`
          echo "build_number=$NEXT_BUILD" >> $GITHUB_OUTPUT
          echo "build_queue_time=$BUILD_QUEUE_TIME" >> $GITHUB_OUTPUT
      - id: check_build_status
        name: Check Build Status
        if: steps.deploy_to_production.outcome == 'success'
        run: |
          echo "Allowing queued jobs to be picked up... temporarily sleeping..."
          BUILD_NUMBER=`echo ${{ steps.deploy_to_production.outputs.build_number }}`
          echo $BUILD_NUMBER
          sleep 60
          BUILD_FOUND="false"
          while [[ $BUILD_FOUND == "false" ]]; do
            STATUS=`curl -w "%{http_code}" -o build.json -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/${BUILD_NUMBER}/api/json`
            echo "The status is ... $STATUS"
            if [ $STATUS -ne 200 ]; then
              echo 'Failed to locate build...'
              echo 'exiting...'
              exit 1;
            fi
            USER_ID=`jq '.actions[] | select(._class == "hudson.model.CauseAction") | .causes[0].userId' build.json | xargs echo -n`
            if [ "$USER_ID" = "okapibot" ]; then
              echo "Found the correct build!!!"
              BUILD_FOUND="true"
            else
              ((BUILD_NUMBER++))
            fi
          done

          RUNNING="true"
          while [ $RUNNING == "true" ]; do
            STATUS=`jq '.result' build.json | xargs echo -n`
            if [ "$STATUS" = "FAILURE" ]; then
              echo 'Oh noes, something borked...'
              echo "https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/$BUILD_NUMBER"
              exit 1;
            fi
            if [ "$STATUS" = "SUCCESS" ]; then
              RUNNING="false"
            else
              echo "Job status is :: $STATUS.  Sleeping 60 seconds..."
              sleep 60
              curl -u ${{ secrets.user_jenkins }}:${{ secrets.api_token_jenkins }} https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/$BUILD_NUMBER/api/json > build.json
            fi
          done

          START_TIME=`echo ${{steps.deploy_to_production.outputs.build_queue_time}}`
          END_TIME=`date +"%Y/%m/%d %H:%M %Z"`
          EXECUTION="https://tools.health.dev-developer.va.gov/jenkins/job/department-of-veterans-affairs/job/health-apis-deployer/job/d2/$BUILD_NUMBER/console"

          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "end_time=$END_TIME" >> $GITHUB_OUTPUT
          echo "execution=$EXECUTION" >> $GITHUB_OUTPUT
      - id: update_mr
        name: Update MR with build information
        if: steps.check_build_status.outcome == 'success'
        run: |
          START_TIME=`echo ${{ steps.check_build_status.outputs.start_time }}`
          END_TIME=`echo ${{ steps.check_build_status.outputs.end_time }}`
          EXECUTION=`echo ${{ steps.check_build_status.outputs.execution }}`
          MR_NUMBER=`echo ${{ steps.get_mr_number.outputs.mr_number }}`

          echo '```' > build-comment.md
          echo "Start: $START_TIME" >> build-comment.md
          echo "End: $END_TIME" >> build-comment.md
          echo "Execution: $EXECUTION" >> build-comment.md
          echo '```' >> build-comment.md

          gh issue comment $MR_NUMBER -R 'department-of-veterans-affairs/lighthouse-platform-backend' --body-file build-comment.md
      - id: remove_mr_in_progress_label_from_existing_prs
        name: Remove MR in progress label from existing PRs
        if: steps.update_mr.outcome == 'success'
        run: |
          prNums=$(gh pr list -R 'department-of-veterans-affairs/lighthouse-platform-backend' --json number --jq '.[] | .number')
          for num in ${prNums[@]}; do
            gh pr edit $num -R 'department-of-veterans-affairs/lighthouse-platform-backend' --remove-label "MR in progress"
          done
      - uses: actions/checkout@v2
        if: |
          steps.deploy_to_production.outcome == 'success'
          && steps.check_build_status.outcome == 'success'
      - name: Disable Workflow till next MR is created
        if: |
          steps.deploy_to_production.outcome == 'success'
          && steps.check_build_status.outcome == 'success'
        run: |
          gh workflow disable 'Auto Deploy master to Production'
