version: "3.8"
services:
  app:
    build:
      context: .
      target: base
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 8080 -b '0.0.0.0'"
    ports:
      - "8080:8080"
    depends_on:
      - db
      - kong
      - kong-migrations
      - kong-database
      - dynamodb
    networks:
      - backend
    environment:
      - DATABASE_HOST=${DATABASE_HOST:-db}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - RAILS_SERVE_STATIC_FILES=true
    volumes:
      - .:/home/ruby
  db:
    image: postgres:13.1
    expose:
      - "5432"
    ports:
      - "5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend

  kong-migrations:
    image: kong:2.3.2
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    depends_on: &kong-db [kong-database]
    environment:
      - &kong_db KONG_DATABASE=postgres
      - &kong_pg_host KONG_PG_HOST=kong-database
      - &kong_pg_db KONG_PG_DATABASE=kong
      - &kong_pg_pw KONG_PG_PASSWORD=kong
      - KONG_PG_USER=kong
    restart: &kong-restart on-failure
    networks: &network [backend]

  kong-database:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 60s
      timeout: 5s
      retries: 5
    networks: *network

  kong:
    image: kong:2.3.2
    ports:
      - 4001:8001
      - 4000:8000
    depends_on: *kong-db
    environment:
      - *kong_db
      - *kong_pg_host
      - *kong_pg_db
      - *kong_pg_pw
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_ACCESS_LOG='/dev/stdout'
      - KONG_ADMIN_ERROR_LOG='/dev/stderr'
    expose:
      - 8000
      - 8001
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8000 || exit 1"]
      interval: 5s
      retries: 10
    networks: *network
    command: ["kong", "docker-start"]
    restart: *kong-restart

  dynamodb:
    image: amazon/dynamodb-local:latest
    ports:
      - "5000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    networks:
      - backend

networks:
  backend:
    driver: bridge
volumes:
  db-data:
